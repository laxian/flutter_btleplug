// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.io.dart' if (dart.library.html) 'bridge_generated.web.dart';

abstract class Btleplug {
  Future<void> init({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitConstMeta;

  /// Scan for Bluetooth Low Energy devices and send the results through the given sink.
  /// In Dart/Flutter one can listen() to bleScan(). The scan is automatically stopped when the subscription is cancelled.
  ///
  /// # Parameters
  ///
  /// * `sink` - A stream sink that new discovered devices will be passed through.
  /// * `filter` - A list of filter strings to apply to the scan result.
  ///
  /// # Return
  ///
  /// Returns a `Result<()>` indicating if the scan operation has successfully started.
  ///
  /// # Dart/Flutter Example
  /// ```dart
  /// final scan = bleScan().await;
  /// scan.listen((devices) {
  /// ...
  /// })
  /// ```
  Stream<List<BleDevice>> scan({required List<String> filter, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kScanConstMeta;

  Future<void> connect({required String id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConnectConstMeta;

  Future<void> disconnect({required String id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDisconnectConstMeta;

  Stream<LogEntry> createLogStream({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateLogStreamConstMeta;
}

/// This is the BleDevice intended to show in Dart/Flutter
class BleDevice {
  final String id;
  final String name;

  const BleDevice({
    required this.id,
    required this.name,
  });
}

class LogEntry {
  final int timeMillis;
  final String msg;

  const LogEntry({
    required this.timeMillis,
    required this.msg,
  });
}

class BtleplugImpl implements Btleplug {
  final BtleplugPlatform _platform;
  factory BtleplugImpl(ExternalLibrary dylib) => BtleplugImpl.raw(BtleplugPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory BtleplugImpl.wasm(FutureOr<WasmModule> module) => BtleplugImpl(module as ExternalLibrary);
  BtleplugImpl.raw(this._platform);
  Future<void> init({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_init(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kInitConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "init",
        argNames: [],
      );

  Stream<List<BleDevice>> scan({required List<String> filter, dynamic hint}) {
    var arg0 = _platform.api2wire_StringList(filter);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_scan(port_, arg0),
      parseSuccessData: _wire2api_list_ble_device,
      parseErrorData: null,
      constMeta: kScanConstMeta,
      argValues: [
        filter
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kScanConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "scan",
        argNames: [
          "filter"
        ],
      );

  Future<void> connect({required String id, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_connect(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kConnectConstMeta,
      argValues: [
        id
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConnectConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "connect",
        argNames: [
          "id"
        ],
      );

  Future<void> disconnect({required String id, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_disconnect(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kDisconnectConstMeta,
      argValues: [
        id
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDisconnectConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "disconnect",
        argNames: [
          "id"
        ],
      );

  Stream<LogEntry> createLogStream({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_log_stream(port_),
      parseSuccessData: _wire2api_log_entry,
      parseErrorData: null,
      constMeta: kCreateLogStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateLogStreamConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "create_log_stream",
        argNames: [],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  FrbAnyhowException _wire2api_FrbAnyhowException(dynamic raw) {
    return FrbAnyhowException(raw as String);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  BleDevice _wire2api_ble_device(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BleDevice(
      id: _wire2api_String(arr[0]),
      name: _wire2api_String(arr[1]),
    );
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  List<BleDevice> _wire2api_list_ble_device(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_ble_device).toList();
  }

  LogEntry _wire2api_log_entry(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LogEntry(
      timeMillis: _wire2api_i64(arr[0]),
      msg: _wire2api_String(arr[1]),
    );
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer
